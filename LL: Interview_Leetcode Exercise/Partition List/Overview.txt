#INTRODUCTION 

LL: Partition List ( ** Interview Question)
⚠️ CAUTION: Advanced Challenge Ahead!

This Linked List problem is significantly more challenging than the ones we've tackled so far. It's common for students at this stage to find this exercise demanding, so don't worry if you're not ready to tackle it yet. It's perfectly okay to set it aside and revisit it later when you feel more confident.

If you decide to take on this challenge, I strongly advise using a hands-on approach: grab a piece of paper and visually map out each step.

This problem requires a clear understanding of how elements in a Linked List interact and move. By now, you've observed numerous Linked List animations in the course, which have prepared you for this moment.

This exercise will be a true test of your ability to apply those concepts practically. Remember, patience and persistence are key here!

Now, here is the exercise:

___________________________________



Implement the partitionList member function for the LinkedList class, which partitions the list such that all nodes with values less than x come before nodes with values greater than or equal to x.

Note:  This linked list class does NOT have a tail which will make this method easier to implement.

The original relative order of the nodes should be preserved.



Function Signature:

void partitionList(int x)



Details:

The function partitionList takes an integer x as a parameter and modifies the current linked list in place according to the specified criteria. If the linked list is empty (i.e., head is null), the function should return immediately without making any changes.



Example 1:

Input:

Linked List: 3 -> 8 -> 5 -> 10 -> 2 -> 1 x: 5

Process:

Values less than 5: 3, 2, 1

Values greater than or equal to 5: 8, 5, 10

Output:

Linked List: 3 -> 2 -> 1 -> 8 -> 5 -> 10





Example 2:
Input:

Linked List: 1 -> 4 -> 3 -> 2 -> 5 -> 2 x: 3

Process:

Values less than 3: 1, 2, 2

Values greater than or equal to 3: 4, 3, 5

Output:

Linked List: 1 -> 2 -> 2 -> 4 -> 3 -> 5





Tips:

While traversing the linked list, maintain two separate chains: one for values less than x and one for values greater than or equal to x.

Use dummy nodes to simplify the handling of the heads of these chains.

After processing the entire list, connect the two chains to get the desired arrangement.



Note:

The solution must maintain the relative order of nodes. For instance, in the first example, even though 8 appears before 5 in the original list, the partitioned list must still have 8 before 5 as their relative order remains unchanged.

Note:

You must solve the problem WITHOUT MODIFYING THE VALUES in the list's nodes (i.e., only the nodes' next pointers may be changed.)



You can also edit the Test.cpp file if you would like to create your own tests.



#HINT

Pseudo Code:

As you work through the pseudo-code, I recommend sketching the nodes, pointers, and each step on paper. This visual representation will greatly aid in understanding and tracking the process.



Check if the head of the linked list is nullptr. If it is, return immediately, as there's nothing to do.

Create two dummy nodes, dummy1 and dummy2, with initial values set to 0.

Initialize two pointers, prev1 and prev2, pointing to the dummy nodes.

Set a current pointer to the head of the linked list.

Iterate through the linked list using the current pointer:

If the value of the current node is less than x, update the next pointer of prev1 to point to the current node and set prev1 to the current node.

If the value of the current node is greater than or equal to x, update the next pointer of prev2 to point to the current node and set prev2 to the current node.

Move the current pointer to the next node in the linked list.

Set the next pointer of prev2 to nullptr, marking the end of the second partition.

Connect the two partitions by setting the next pointer of prev1 to the next pointer of dummy2.

Update the head of the linked list to point to the next pointer of dummy1.

#SOLUTION

        void partitionList(int x) {
            if (head == nullptr) return;
 
            Node dummy1(0);
            Node dummy2(0);
            Node* prev1 = &dummy1;
            Node* prev2 = &dummy2;
            Node* current = head;
 
            while (current != nullptr) {
                if (current->value < x) {
                    prev1->next = current;
                    prev1 = current;
                } else {
                    prev2->next = current;
                    prev2 = current;
                }
                current = current->next;
            }
 
            prev2->next = nullptr;
            prev1->next = dummy2.next;
            head = dummy1.next;
        }




The partitionList function is part of a LinkedList class.

The method partitions the linked list around a given integer value x.

After partitioning, all nodes with values less than x come before nodes with values greater than or equal to x.

Here's a step-by-step explanation of the code:

if (head == nullptr) return;: This line checks if the linked list is empty (i.e., the head is nullptr). If it's empty, there is nothing to partition, so the method returns immediately.

Node dummy1(0); and Node dummy2(0);: Two dummy nodes are created with values of 0. These dummy nodes will help in keeping track of the heads of two sublists: one for nodes with values less than x and another for nodes with values greater than or equal to x.

Node* prev1 = &dummy1; and Node* prev2 = &dummy2;: Two pointers, prev1 and prev2, are created and initialized to the addresses of the dummy nodes. These pointers will be used to traverse and build the two sublists.

Node* current = head;: A pointer to a Node object named current is created and initialized to the head of the linked list. It will be used to traverse the list.

while (current != nullptr) { ... }: This while loop iterates through the linked list until the current node is nullptr, indicating the end of the list.

if (current->value < x) { ... }: This condition checks if the value of the current node is less than x. If it is, the code block within the condition will execute.

prev1->next = current;: The next pointer of the prev1 node is updated to point to the current node, adding the node to the first sublist.

prev1 = current;: The prev1 pointer is updated to point to the current node, moving the iteration forward.

else { ... }: If the value of the current node is greater than or equal to x, the code block within the else statement will execute.

prev2->next = current;: The next pointer of the prev2 node is updated to point to the current node, adding the node to the second sublist.

prev2 = current;: The prev2 pointer is updated to point to the current node, moving the iteration forward.

current = current->next;: The current pointer is updated to point to the next node in the linked list, moving the outer loop iteration forward.

prev2->next = nullptr;: The next pointer of the last node in the second sublist (pointed to by prev2) is set to nullptr, indicating the end of the sublist.

prev1->next = dummy2.next;: The next pointer of the last node in the first sublist (pointed to by prev1) is updated to point to the head of the second sublist (i.e., the node after the dummy2 node). This action connects the two sublists.

head = dummy1.next;: The head of the entire linked list is updated by pointing it to the node after the dummy1 node, ensuring that the modified linked list is properly connected.





Code with inline comments:



void partitionList(int x) {
    // Return if the list is empty
    if (head == nullptr) return;
 
    // Create dummy nodes for two lists
    Node dummy1(0);
    Node dummy2(0);
    // Initialize pointers for two lists
    Node* prev1 = &dummy1;
    Node* prev2 = &dummy2;
    // Initialize the current pointer
    Node* current = head;
 
    // Iterate through the list
    while (current != nullptr) {
        // If the value is less than x
        if (current->value < x) {
            prev1->next = current;
            prev1 = current;
        } else { // If the value is >= x
            prev2->next = current;
            prev2 = current;
        }
        // Move to the next node
        current = current->next;
    }
 
    // Terminate the second list
    prev2->next = nullptr;
    // Connect the two lists
    prev1->next = dummy2.next;
    // Update the head of the list
    head = dummy1.next;
}