#INTRODUCTION 
LL: Has Loop ( ** Interview Question)
Implement a function called hasLoop to detect if a given singly-linked list contains a loop (a cycle) or not.

The function should return true if a loop is detected in the linked list, and false otherwise.

Function Signature:

bool hasLoop();



You are required to use Floyd's cycle-finding algorithm (also known as the "tortoise and the hare" algorithm) to detect the loop.

This algorithm uses two pointers: a slow pointer and a fast pointer. The slow pointer moves one step at a time, while the fast pointer moves two steps at a time. If there is a loop in the linked list, the two pointers will eventually meet at some point. If there is no loop, the fast pointer will reach the end of the list.


If your Linked List contains a loop, it indicates a flaw in its implementation. This situation can manifest in several ways:





















To assist you in the implementation and troubleshooting, a test suite has been provided in the Test.cpp file. This file contains a series of tests that validate the functionality of your code and will output to the "User logs" tab.

You can also edit the Test.cpp file if you would like to create your own tests.



#HINT

Pseudo Code:

Create a function named 'hasLoop' that returns a boolean value

Initialize two pointers, 'slow' and 'fast', both pointing to the head of the list

While 'fast' is not null and the 'next' pointer of 'fast' is not null, do the following:

Move 'slow' one step forward (slow = slow->next)

Move 'fast' two steps forward (fast = fast->next->next)

If 'slow' and 'fast' pointers become equal, return true (indicating a loop is present in the list)

If the loop terminates without finding a loop, return false (indicating no loop is present in the list)

#SOLUTION

        bool hasLoop() {
            Node* slow = head;
            Node* fast = head;
            while (fast != nullptr && fast->next != nullptr) {
                slow = slow->next;
                fast = fast->next->next;
                if (slow == fast) {
                    return true;
                }
            }
            return false;
        }




The hasLoop() function is used to determine if there is a loop (cycle) in a linked list. It uses the "tortoise and hare" (or "Floyd's cycle-finding") algorithm, which works as follows:



Create two pointers, slow and fast, both initially pointing to the head of the linked list.

Traverse the linked list with the slow pointer moving one step at a time and the fast pointer moving two steps at a time.

If there is a loop in the list, the fast pointer will eventually meet the slow pointer inside the loop. If there is no loop, the fast pointer will reach the end of the list (i.e., become null or point to the last node).



Here's a step-by-step explanation of the code:



Initialize the slow and fast pointers to the head of the linked list.

Start a while loop that continues as long as the fast pointer is not null and the next node of the fast pointer is not null. The loop will break if either of these conditions is false, indicating that the end of the list has been reached, and thus there is no loop.

Inside the loop, move the slow pointer one step forward (to the next node) and the fast pointer two steps forward (to the next-to-next node).

Check if the slow pointer is equal to the fast pointer. If they are equal, it means the pointers have met inside the loop, so a loop exists in the linked list. In this case, return true.

If the while loop completes without the pointers meeting, it means there is no loop in the list. In this case, return false.



This algorithm has a time complexity of O(n) and a space complexity of O(1), making it an efficient way to detect loops in a linked list.





Code with inline comments:



bool hasLoop() {
    // Initialize slow and fast pointers
    Node* slow = head;
    Node* fast = head;
 
    // Loop until the end of the list is reached
    while (fast != nullptr && fast->next != nullptr) {
        // Move slow pointer one step forward
        slow = slow->next;
        // Move fast pointer two steps forward
        fast = fast->next->next;
 
        // Check if slow and fast pointers meet
        if (slow == fast) {
            // A loop is found, return true
            return true;
        }
    }
 
    // No loop is found, return false
    return false;
}
