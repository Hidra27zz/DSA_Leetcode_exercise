#INTRODUCTION 

Set: Remove Duplicates ( ** Interview Question)
Write a function called removeDuplicates.

This function takes a list of numbers as input and returns a new list that has all the duplicate numbers removed.



Input

A list of numbers stored in a vector called myList.



Output

A new list of numbers, also stored in a vector, with all duplicates removed.



Example:

Input List

[1, 2, 2, 3, 3, 3, 4, 5, 5, 6]



Output List

[1, 2, 3, 4, 5, 6]



Here is how the function works, step-by-step:



Start with the Original List: The function starts with the original list of numbers that may have duplicates.

Create an Empty Set: It then creates an empty set to store unique numbers.

Go Through Each Number: The function looks at each number in the original list, one by one.

Add to Set: If a number is not already in the set, it gets added. If it's already there, the function skips it.

Create a New List: Finally, the function makes a new list from the numbers in the set. The new list has all duplicates removed.

Return the New List: The function returns the new list.

#HINT

Pseudo Code:



Objective

The goal of this function is to remove all duplicate numbers from a given list of numbers (vector).



Pseudo Code Outline

Function Signature

Define a function called removeDuplicates that takes a vector myList as input and returns a vector.

Create an Empty Set for Unique Numbers

Create an empty unordered set called uniqueSet.

Use the numbers from myList to fill this set.

Since sets only allow unique values, duplicates will automatically be removed.

Create a New List from the Set

Create a new vector using the unique numbers in the uniqueSet.

This will be our new list without duplicates.

Return the New List

Return this new vector, which has all duplicates removed from myList.



Detailed Steps

Step 1: Function Signature

function removeDuplicates(myList: vector of int): returns vector of int

Step 2: Create an Empty Set for Unique Numbers

uniqueSet = empty unordered set of int

for each number in myList do

add number to uniqueSet

end for

Step 3: Create a New List from the Set

newList = empty vector of int

for each number in uniqueSet do

add number to newList

end for

Step 4: Return the New List

return newList

#SOLUTION


vector<int> removeDuplicates(const vector<int>& myList) {
    unordered_set<int> uniqueSet(myList.begin(), myList.end());
    return vector<int>(uniqueSet.begin(), uniqueSet.end());
}




Overview:

This code defines a function named removeDuplicates that takes in a list of numbers and returns a new list where all the duplicate numbers are removed.



Code Components:

1. Function Header:

vector<int> removeDuplicates(const vector<int>& myList)

This part is called the function header. It tells us:

The function is named removeDuplicates.

It takes one argument, which is a list of integers named myList.

It returns a new list of integers.

2. Create an Empty Set and Fill it:

unordered_set<int> uniqueSet(myList.begin(), myList.end());

Here, an empty set called uniqueSet is created. Sets only store unique items. The code fills this set with all numbers from myList.

3. Return a New List Created from the Set:

return vector<int>(uniqueSet.begin(), uniqueSet.end());

Finally, the code returns a new list. It takes all numbers from the set uniqueSet and puts them into this new list.



Step-By-Step:

Function Starts: When you call the function, it starts running with the list myList that you provide.

Make a Set: It then makes an empty set called uniqueSet.

Fill the Set: The function fills this set with numbers from myList. If there are any duplicates, the set will only keep one copy.

Create a New List: Then, it creates a new list using the numbers in the set uniqueSet.

Return New List: Finally, the function returns this new list back to you.





Code with inline comments:



// Function called 'removeDuplicates' that takes in a list 
// of numbers called 'myList' and returns a new list 
// with duplicates removed.
vector<int> removeDuplicates(const vector<int>& myList) {
  
  // Create an empty set called 'uniqueSet'. Sets can't have duplicate items.
  // Initialize it with the numbers from 'myList'. This removes duplicates
  // automatically because sets only store unique values.
  unordered_set<int> uniqueSet(myList.begin(), myList.end());
  
  // Convert 'uniqueSet' back to a list (vector) format. 
  // This new list will contain all unique numbers, in no specific order.
  // The new list is what gets returned by the function.
  return vector<int>(uniqueSet.begin(), uniqueSet.end());
}
