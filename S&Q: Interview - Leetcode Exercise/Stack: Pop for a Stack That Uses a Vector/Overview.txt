#INTRODUCTION

Stack: Pop for a Stack That Uses a Vector ( ** Interview Question)
Add a member function to the Stack class that we started in the last exercise called pop() that removes the top element from the stack if it is not empty.

Remember: This Stack implementation uses a vector instead of a Linked List.



Input:
The function is a member of the Stack class, which has a private member stackVector, a vector<int> representing the stack.



Output:
The function should not return any value, but it should remove the top element from the stack if it is not empty. If the stack is empty, the function should do nothing.



Constraints:
The pop() function should work correctly for stacks of any size, including empty stacks.



Examples:

Consider the following stack:

Stack:
5
4
3
2
1
After calling pop() with the Stack object, the stack should look like this:

Stack:
4
3
2
1




Consider an empty stack:

Stack:
After calling pop() with the Stack object, the stack should remain empty:

Stack:


#HINT
Pseudo Code:

Pop function

Check if the stack list is not empty

If not empty, remove the last element from the stack list

#SOLUTION

        void pop() {
            if (!isEmpty()) {
                stackVector.pop_back(); 
            }
        }


The pop function is part of the Stack class that uses a vector named stackVector to implement a stack data structure. The function removes the top element from the stack.



Here's a step-by-step explanation of the code:



if (!isEmpty()) { ... }

This if statement checks if the stack is not empty using the isEmpty() function, which returns true if the stack is empty (i.e., the size of stackVector is 0). If the stack is not empty, the code inside the if statement is executed.

stackVector.pop_back();

Inside the if statement, the pop_back() function is called on stackVector. This operation removes the last element from the vector, which is the top element of the stack.



After the pop function is executed, the stack is updated with the top element removed.





Code with inline comments:



void pop() {
    // Check if the stack (represented by stackVector) is not empty
    if (!isEmpty()) {
        // Remove the top element by popping it from the back of the list
        stackVector.pop_back(); 
    }
}
